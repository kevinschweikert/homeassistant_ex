# Homeassistant Example

```elixir
Mix.install([
  {:homeassistant_ex, path: __DIR__},
  {:kino, "~> 0.16.0"}
])
```

## Section

```elixir
defmodule MySwitch do
  use Homeassistant.Entity.Switch, name: "my-switch"

  def handle_on(state) do
    IO.puts "Switch turned on"
    {:noreply, state}
  end

    def handle_off(state) do
    IO.puts "Switch turned off"
    {:noreply, state}
  end

  def handle_state(payload, state) do
    IO.puts "New message for MySwitch: #{payload}"
    {:noreply, state}
  end
end
```

```elixir
Logger.put_application_level(:emqtt, :info)
```

```elixir
{:ok, pid} = Homeassistant.Supervisor.start_link([entities: [MySwitch]])
```

```elixir
measurement = "OFF"
Homeassistant.Client.publish(MySwitch.state_topic(), measurement)
```

```elixir
measurement = "ON"
Homeassistant.Client.publish(MySwitch.state_topic(), measurement)
```

```elixir
alias Homeassistant.MQTT.{Device, Origin, Component}

config = %Homeassistant.MQTT{
  device: %Device{
    identifiers: ["1234foo_device"],
    name: "Example Device",
    manufacturer: "Elixir",
    model: "Livebook",
    serial_number: "123456789",
    sw_version: "1.0",
    hw_version: "0.1"
  },
  origin: %Origin{
    sw_version: "0.1.0",
    name: "homeassistant_ex",
    support_url: "http://localhost"
  },
  components: %{"foo" => %Component{
      platform: "sensor",
      device_class: "humidity",
      unit_of_measurement: "%",
      value_template: "{{ value_json.humidity }}",
      unique_id: "hum_01"
  }},
  state_topic: "/some/state/topic",
  command_topic: "/some/command/topic",
  encoding: "json",
  qos: 1
}

Homeassistant.Client.publish("homeassistant/device/1234foo/config", config)
```

```elixir
measurement = %{humidity: 69}
Homeassistant.Client.publish("/some/state/topic", measurement)
```
